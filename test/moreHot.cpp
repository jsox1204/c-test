#include <iostream>
#include <queue>
#include <vector>

/*
매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)

Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항

    - scoville의 길이는 2 이상 1,000,000 이하입니다.
    - K는 0 이상 1,000,000,000 이하입니다.
    - scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
    - 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
 */

int solution(std::vector<int> scoville, int k);

int main() {

    std::vector<int> scoville = {1, 2, 3, 9, 10, 12};
    int k = 7;

    std::cout << solution(scoville, k) << '\n';
}

int solution(std::vector<int> scoville, int k) {

    std::priority_queue<int, std::vector<int>, std::greater<>> queue_scoville;
    int answer = 0;

    for (int i : scoville) {
        queue_scoville.emplace(i);
    }

    if (!queue_scoville.empty() && queue_scoville.top() >= k) {
        return answer;
    }

    do {
        answer++;

        if (queue_scoville.size() < 2) {
            return -1;
        }
        int minScoville1 = queue_scoville.top();
        queue_scoville.pop();
        int minScoville2 = queue_scoville.top();
        queue_scoville.pop();
        queue_scoville.emplace(minScoville1 + (minScoville2 * 2));
        
    }
    while (!queue_scoville.empty() && queue_scoville.top() < k);

    return answer;
}
